# TODOLIST PRIORITAS PENGEMBANGAN SISTEM ABSENSI
## Analisis Keterkaitan Frontend-Backend & Roadmap Implementasi

================================================================================
## 🎯 RINGKASAN ANALISIS PROJECT

### Backend Status: ✅ LENGKAP (95%)
- Models: ✅ Complete (7 files)
- Controllers: ✅ Complete (15+ controllers)
- Routes: ✅ Complete (9 route files)
- Middleware: ✅ Complete
- Database: ✅ Complete with relationships

### Frontend Status: ⚠️ PARSIAL (40%)
- Routes: ✅ Complete (3 role-based routes)
- Components: ⚠️ Declared but needs implementation
- Views: ⚠️ Folder structure ready, components need development
- State Management: ✅ Redux setup ready

================================================================================
## 🚀 ROADMAP PRIORITAS IMPLEMENTASI

### FASE 1: FOUNDATION & AUTHENTICATION (PRIORITAS TINGGI)
**Timeline: Week 1-2**

#### 1.1 Authentication System ⭐⭐⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/authController.js`
- **Models:** `Users` (userManagementModel.js)
- **Routes:** `/api/auth/*` (routes/shared/authRoutes.js)
- **Middleware:** `middleware/AuthUser.js` (session & role verification)
- **Related Files:**
  - `config/Database.js` (session configuration)
  - `models/userModel.js` (user authentication fields)
  - `models/index.js` (user relationships)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: CRITICAL
Components Needed:
├── views/auth/SignIn.jsx
├── views/auth/Logout.jsx
├── components/security/AuthGuard.jsx
└── store/slices/authSlice.js

Integration Points:
- Login: POST /api/auth/login
- Logout: DELETE /api/auth/logout
- Session Check: GET /api/auth/me
- Registration: POST /api/auth/register
- Role Verification: middleware AuthUser.js

Backend File Structure:
├── controllers/shared/authController.js
│   ├── login() - Session-based authentication
│   ├── logOut() - Session cleanup
│   ├── Me() - Current user info
│   └── registrasi() - User registration
├── middleware/AuthUser.js
│   ├── verifyUser() - Session verification
│   └── adminOnly() - Role-based access
├── routes/shared/authRoutes.js
│   ├── GET /api/auth/me
│   ├── POST /api/auth/login
│   ├── POST /api/auth/register
│   └── DELETE /api/auth/logout
└── models/userManagementModel.js
    └── Users table with authentication fields
```

#### 1.2 User Management (Super Admin) ⭐⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/administrator/userManagementController.js`
- **Models:** `Users` (userManagementModel.js)
- **Routes:** `/api/admin/*` (routes/administrator/userManagementRoutes.js)
- **Middleware:** `middleware/AuthUser.js` (admin access control)
- **Related Files:**
  - `controllers/administrator/dashboardController.js` (admin dashboard)
  - `models/userModel.js` (user profile fields)
  - `middleware/uploadConfig.js` (profile image upload)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: HIGH
Components Needed:
├── views/super-admin/user-management/index.jsx
├── views/super-admin/user-management/components/
│   ├── AddUser.jsx
│   ├── EditUser.jsx
│   └── UsersList.jsx
└── components/forms/UserForm.jsx

Integration Points:
- Get Admin Dashboard: GET /api/admin/dashboard
- Get Users: GET /api/admin/users
- Add User: POST /api/admin/users
- Update User: PUT /api/admin/users/:id
- Delete User: DELETE /api/admin/users/:id
- Upload Profile: POST /api/admin/users/:id/avatar

Backend File Structure:
├── controllers/administrator/userManagementController.js
│   ├── getUsers() - Paginated user list
│   ├── createUser() - Add new user
│   ├── updateUser() - Edit existing user
│   ├── deleteUser() - Remove user
│   └── getUserProfile() - Get user details
├── controllers/administrator/dashboardController.js
│   └── getDashboard() - Admin statistics
├── routes/administrator/userManagementRoutes.js
│   └── Admin-specific user management endpoints
└── models/userManagementModel.js
    └── Users table with full CRUD operations
```

================================================================================
### FASE 2: CORE FUNCTIONALITY (PRIORITAS SEDANG-TINGGI)
**Timeline: Week 3-4**

#### 2.1 Dashboard System ⭐⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/dashboardController.js` (multi-role)
- **Models:** Multiple (Users, Courses, AttendanceSessions, StudentAttendances, FaceDatasets)
- **Routes:** `/api/dashboard/*` (routes/shared/dashboardRoutes.js)
- **Related Files:**
  - `controllers/administrator/dashboardController.js` (admin-specific)
  - `controllers/lecturer/dashboardController.js` (lecturer-specific)
  - `controllers/student/dashboardController.js` (student-specific)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: HIGH
Components Needed:
├── views/super-admin/dashboard/index.jsx
├── views/lecturer/dashboard/index.jsx
├── views/student/dashboard/index.jsx
└── components/widget/StatCard.jsx

Integration Points:
- Super Admin: GET /api/dashboard/super-admin
- Lecturer: GET /api/dashboard/lecturer
- Student: GET /api/dashboard/student
- Admin Panel: GET /api/admin/dashboard

Backend File Structure:
├── controllers/shared/dashboardController.js
│   ├── getSuperAdminDashboard() - System overview, user stats
│   ├── getLecturerDashboard() - Teaching stats, courses
│   └── getStudentDashboard() - Attendance stats, schedules
├── controllers/administrator/dashboardController.js
│   └── getDashboard() - Admin-specific metrics
├── routes/shared/dashboardRoutes.js
│   ├── GET /api/dashboard/super-admin
│   ├── GET /api/dashboard/lecturer
│   └── GET /api/dashboard/student
└── Multiple models integration:
    ├── Users (user statistics)
    ├── Courses & CourseClasses (course metrics)
    ├── AttendanceSessions (session statistics)
    └── StudentAttendances (attendance metrics)
```

#### 2.2 Course Management ⭐⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/courseController.js`
- **Models:** `Courses`, `CourseClasses`, `StudentEnrollments` (courseManagementModel.js)
- **Routes:** `/api/courses/*` (routes/shared/courseRoutes.js)
- **Related Files:**
  - `models/index.js` (course relationships)
  - `models/userManagementModel.js` (Users table)
  - `utils/helpers.js` (schedule validation utilities)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: HIGH
Components Needed:
├── views/lecturer/courses/index.jsx
├── views/student/courses/index.jsx (CourseSchedule)
└── components/course/CourseCard.jsx

Integration Points:
- Get Courses: GET /api/courses
- Create Course: POST /api/courses
- Update Course: PUT /api/courses/:id
- Delete Course: DELETE /api/courses/:id
- Get Course Classes: GET /api/courses/:course_id/classes
- Create Class: POST /api/courses/classes
- Enroll Student: POST /api/courses/enrollments
- Get Enrollments: GET /api/courses/classes/:class_id/enrollments
- Update Enrollment: PATCH /api/courses/enrollments/:id/status

Backend File Structure:
├── controllers/shared/courseController.js
│   ├── getCourses() - List all courses
│   ├── createCourse() - Add new course
│   ├── updateCourse() - Edit course details
│   ├── deleteCourse() - Remove course
│   ├── getCourseClasses() - Get classes for course
│   ├── createCourseClass() - Create class schedule
│   ├── getClassEnrollments() - Get enrolled students
│   ├── enrollStudent() - Add student to class
│   └── updateEnrollmentStatus() - Change enrollment status
├── models/courseManagementModel.js
│   ├── Courses (course basic info)
│   ├── CourseClasses (class schedules)
│   └── StudentEnrollments (student-class relationships)
├── routes/shared/courseRoutes.js (9 endpoints)
│   ├── Course CRUD operations
│   ├── Class management
│   └── Enrollment management
└── utils/helpers.js
    └── Schedule conflict detection utilities
```

#### 2.3 Attendance Management ⭐⭐⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/attendanceController.js`
- **Models:** `AttendanceSessions`, `StudentAttendances`, `FaceRecognitionLogs` (attendanceModel.js)
- **Routes:** `/api/attendance/*` (routes/shared/attendanceRoutes.js)
- **Related Files:**
  - `models/courseManagementModel.js` (CourseClasses relationship)
  - `models/userManagementModel.js` (Users relationship)
  - `controllers/shared/faceDatasetController.js` (face recognition integration)
  - `utils/helpers.js` (attendance utilities)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: CRITICAL
Components Needed:
├── views/lecturer/attendance/
│   ├── index.jsx (AttendanceManagement)
│   └── components/
│       ├── TakeAttendance.jsx
│       ├── AttendanceHistory.jsx
│       └── ManualAttendance.jsx
├── views/student/attendance/index.jsx (MyAttendance)
└── views/super-admin/attendance/
    ├── index.jsx
    └── components/
        ├── AttendanceHistory.jsx
        └── ManualVerification.jsx

Integration Points:
- Create Session: POST /api/attendance/sessions
- Get Sessions: GET /api/attendance/sessions/class/:course_class_id
- Start Session: PATCH /api/attendance/sessions/:id/start
- End Session: PATCH /api/attendance/sessions/:id/end
- Record Attendance: POST /api/attendance/record
- Face Recognition: POST /api/attendance/record/face
- Get Attendances: GET /api/attendance/session/:session_id
- Update Status: PATCH /api/attendance/records/:id
- Get Statistics: GET /api/attendance/statistics/class/:course_class_id

Backend File Structure:
├── controllers/shared/attendanceController.js (comprehensive)
│   ├── createAttendanceSession() - Create new session
│   ├── getAttendanceSessions() - List sessions
│   ├── startAttendanceSession() - Begin attendance taking
│   ├── endAttendanceSession() - Close session
│   ├── recordAttendance() - Manual attendance
│   ├── recordAttendanceByFace() - Face recognition
│   ├── getSessionAttendances() - Session records
│   ├── updateAttendanceStatus() - Manual override
│   └── getAttendanceStatistics() - Class statistics
├── models/attendanceModel.js
│   ├── AttendanceSessions (session management)
│   ├── StudentAttendances (attendance records)
│   └── FaceRecognitionLogs (face recognition logs)
├── routes/shared/attendanceRoutes.js (9 endpoints)
│   ├── Session management (4 endpoints)
│   ├── Attendance recording (4 endpoints)
│   └── Statistics (1 endpoint)
└── Integration with:
    ├── Face recognition system
    ├── Course management
    └── User management
```

================================================================================
### FASE 3: ADVANCED FEATURES (PRIORITAS SEDANG)
**Timeline: Week 5-6**

#### 3.1 Face Dataset Management ⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/faceDatasetController.js`
- **Models:** `FaceDatasets`, `FaceRecognitionLogs` (attendanceModel.js)
- **Routes:** Integrated in `/api/system/*` (systemRoutes.js) dan `/api/attendance/*` (attendanceRoutes.js)
- **Middleware:** `middleware/uploadConfig.js` (uploadFaceDataset multer config)
- **Related Files:**
  - `models/userModel.js` (face_dataset_status, face_dataset_last_updated)
  - `models/index.js` (FaceDatasets relationships)
  - `public/uploads/face-datasets/` (storage directory)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: MEDIUM
Components Needed:
├── views/super-admin/face-dataset/
│   ├── index.jsx
│   └── components/
│       ├── UploadDataset.jsx
│       ├── ManageDataset.jsx
│       └── VerifyDataset.jsx
└── components/upload/FileUploader.jsx

Integration Points:
- Upload Dataset: POST /api/system/face-dataset/upload
- Verify Dataset: PUT /api/system/face-dataset/:id/verify
- Get Datasets: GET /api/system/face-datasets
- Face Recognition: POST /api/attendance/record/face
- User Dataset Status: GET /api/auth/profile (face_dataset_status)

Backend File Structure:
├── controllers/shared/faceDatasetController.js (680 lines)
│   ├── uploadFaceDataset()
│   ├── getAllFaceDatasets()
│   ├── verifyFaceDataset()
│   ├── rejectFaceDataset()
│   └── deleteFaceDataset()
├── models/attendanceModel.js
│   ├── FaceDatasets (table definition)
│   └── FaceRecognitionLogs (table definition)
├── middleware/uploadConfig.js
│   ├── uploadFaceDataset (multer config)
│   ├── File validation (JPEG, JPG, PNG)
│   └── 5MB file size limit
└── routes/shared/systemRoutes.js & attendanceRoutes.js
    ├── Face dataset CRUD endpoints
    └── Face recognition endpoint
```

#### 3.2 Room Management ⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/roomController.js`
- **Models:** `Rooms`, `RoomAccessPermissions`, `DoorAccessLogs` (systemModel.js)
- **Routes:** `/api/rooms/*` (routes/shared/roomRoutes.js)
- **Related Files:**
  - `models/courseManagementModel.js` (CourseClasses-Rooms relationship)
  - `controllers/shared/systemController.js` (door access control)
  - `models/index.js` (room relationships)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: MEDIUM
Components Needed:
├── views/super-admin/room-access/
│   ├── index.jsx
│   └── components/DoorSettings.jsx
└── components/room/RoomCard.jsx

Integration Points:
- Get Rooms: GET /api/rooms
- Get Room Details: GET /api/rooms/:id
- Create Room: POST /api/rooms
- Update Room: PUT /api/rooms/:id
- Delete Room: DELETE /api/rooms/:id
- Get Room Schedule: GET /api/rooms/:id/schedule
- Check Availability: GET /api/rooms/:id/availability
- Access History: GET /api/rooms/:id/access-history
- Door Control: via /api/system/door-access-logs

Backend File Structure:
├── controllers/shared/roomController.js
│   ├── getRooms() - List all rooms
│   ├── getRoomById() - Room details
│   ├── createRoom() - Add new room
│   ├── updateRoom() - Edit room info
│   ├── deleteRoom() - Remove room
│   ├── getRoomSchedule() - Room usage schedule
│   ├── checkRoomAvailability() - Availability check
│   └── getRoomAccessHistory() - Access logs
├── models/systemModel.js
│   ├── Rooms (room basic info)
│   ├── RoomAccessPermissions (access control)
│   └── DoorAccessLogs (access history)
├── routes/shared/roomRoutes.js (8 endpoints)
│   ├── Basic CRUD operations (5 endpoints)
│   ├── Schedule & availability (2 endpoints)
│   └── Access history (1 endpoint)
└── Integration with:
    ├── Course scheduling
    ├── Access control system
    └── Door hardware interface
```

#### 3.3 Notification System ⭐⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/notificationController.js`
- **Models:** `Notifications` (systemModel.js)
- **Routes:** `/api/notifications/*` (routes/shared/notificationRoutes.js)
- **Related Files:**
  - `models/userManagementModel.js` (Users relationship)
  - `models/index.js` (notification relationships)
  - `utils/helpers.js` (notification utilities)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: MEDIUM
Components Needed:
├── views/*/notifications/NotificationCenter.jsx (all roles)
├── components/notifications/NotificationBell.jsx
└── components/notifications/NotificationItem.jsx

Integration Points:
- Get Notifications: GET /api/notifications
- Get Unread Count: GET /api/notifications/unread-count
- Mark as Read: PATCH /api/notifications/:id/read
- Mark All Read: PATCH /api/notifications/read-all
- Delete Notification: DELETE /api/notifications/:id
- Send Notification: POST /api/notifications/send
- Broadcast Notification: POST /api/notifications/broadcast

Backend File Structure:
├── controllers/shared/notificationController.js
│   ├── getUserNotifications() - Get user notifications
│   ├── getUnreadCount() - Unread notification count
│   ├── markAsRead() - Mark single notification read
│   ├── markAllAsRead() - Mark all notifications read
│   ├── deleteNotification() - Delete notification
│   ├── sendNotification() - Send to specific user
│   └── broadcastNotification() - Send to multiple users
├── models/systemModel.js
│   └── Notifications (notification data)
├── routes/shared/notificationRoutes.js (7 endpoints)
│   ├── User notification management (5 endpoints)
│   └── Admin notification sending (2 endpoints)
└── Integration with:
    ├── User management system
    ├── Real-time updates
    └── Role-based notification access
```

================================================================================
### FASE 4: REPORTING & ANALYTICS (PRIORITAS RENDAH)
**Timeline: Week 7-8**

#### 4.1 Reporting System ⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/reportController.js`
- **Models:** Multiple (AttendanceSessions, StudentAttendances, Users, Courses)
- **Routes:** `/api/reports/*` (routes/shared/reportRoutes.js)
- **Related Files:**
  - `controllers/shared/attendanceController.js` (attendance statistics)
  - `utils/helpers.js` (report formatting utilities)
  - `models/index.js` (cross-model relationships)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: LOW
Components Needed:
├── views/lecturer/analytics/AttendancePatterns.jsx
└── components/charts/AttendanceChart.jsx

Integration Points:
- Class Attendance Report: GET /api/reports/attendance/class/:class_id
- Student Attendance Report: GET /api/reports/attendance/student/:student_id
- Lecturer Summary: GET /api/reports/attendance/lecturer/:lecturer_id
- Export Capabilities: Built-in with report endpoints

Backend File Structure:
├── controllers/shared/reportController.js
│   ├── getClassAttendanceReport() - Class attendance analytics
│   ├── getStudentAttendanceReport() - Individual student report
│   └── getLecturerAttendanceSummary() - Lecturer teaching summary
├── routes/shared/reportRoutes.js (3 endpoints)
│   ├── Class reports
│   ├── Student reports
│   └── Lecturer reports
└── Integration with:
    ├── Attendance management system
    ├── Course management system
    ├── User management system
    └── Statistical analysis utilities
```

#### 4.2 Profile Management ⭐⭐
**Backend:** ✅ READY
- **Controller:** `controllers/shared/authController.js` (profile functions)
- **Models:** `Users` (userManagementModel.js, userModel.js)
- **Routes:** `/api/auth/*` (routes/shared/authRoutes.js)
- **Middleware:** `middleware/uploadConfig.js` (profile image upload)
- **Related Files:**
  - `controllers/administrator/userManagementController.js` (admin profile management)
  - `public/images/profiles/` (profile image storage)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: LOW
Components Needed:
├── views/*/profile/*Profile.jsx (all roles)
├── views/lecturer/settings/index.jsx (ProfileSettings)
└── components/profile/ProfileEditor.jsx

Integration Points:
- Get Profile: GET /api/auth/me
- Update Profile: PUT /api/auth/profile
- Upload Avatar: POST /api/auth/avatar
- Change Password: PUT /api/auth/password
- Face Dataset Status: GET /api/auth/profile (face_dataset_status)

Backend File Structure:
├── controllers/shared/authController.js
│   ├── Me() - Get current user profile
│   ├── updateProfile() - Update profile info
│   ├── changePassword() - Change user password
│   └── uploadAvatar() - Upload profile image
├── models/userManagementModel.js & userModel.js
│   ├── Users table (complete profile fields)
│   ├── Profile image paths
│   ├── Face dataset status
│   └── Last updated timestamps
├── middleware/uploadConfig.js
│   ├── Profile image upload config
│   ├── Image validation & resizing
│   └── File storage management
└── Integration with:
    ├── Authentication system
    ├── Face dataset management
    ├── File upload system
    └── User management
```

================================================================================
## 📋 CHECKLIST IMPLEMENTASI PER ROLE

### SUPER ADMIN (7 fitur utama)
```
□ Dashboard (/admin/default)
□ User Management (/admin/user-management)
  □ Add User (/admin/add-user)
  □ Edit User (/admin/edit-user)
  □ Users List (/admin/users-list)
□ Face Dataset Management (/admin/face-dataset)
  □ Upload Dataset (/admin/upload-dataset)
  □ Manage Dataset (/admin/manage-dataset)
  □ Verify Dataset (/admin/verify-dataset)
□ Attendance Management (/admin/attendance)
  □ Attendance History (/admin/attendance-history)
  □ Manual Verification (/admin/manual-verification)
□ Room Access (/admin/room-access)
  □ Door Settings (/admin/door-settings)
□ Notifications (/admin/notifications)
□ Profile (/admin/profile)
```

### LECTURER (11 fitur utama)
```
□ Dashboard (/lecturer/default)
□ Course Management (/lecturer/courses)
□ Attendance Management (/lecturer/attendance)
  □ Take Attendance (/lecturer/take-attendance)
  □ Attendance History (/lecturer/attendance-history)
  □ Manual Attendance (/lecturer/manual-attendance)
□ Student Performance (/lecturer/students)
□ Analytics (/lecturer/attendance-patterns)
□ Session Management (/lecturer/sessions)
□ Notifications (/lecturer/notifications)
□ Profile (/lecturer/profile)
□ Settings (/lecturer/settings)
```

### STUDENT (6 fitur utama)
```
□ Dashboard (/student/default)
□ My Attendance (/student/my-attendance)
□ Course Schedule (/student/schedule)
□ Profile (/student/profile)
□ Notifications (/student/notifications)
```

================================================================================
## 🔧 TECHNICAL INTEGRATION NOTES

### API Endpoints Mapping:
```
Authentication: /api/auth/*
User Management: /api/admin/*
Dashboard: /api/dashboard/*
Courses: /api/courses/*
Attendance: /api/attendance/*
Rooms: /api/rooms/*
Notifications: /api/notifications/*
Reports: /api/reports/*
System: /api/system/*
```

### Key Models Relationships:
```
Users → FaceDatasets (1:many)
Users → StudentEnrollments (1:many)
Courses → CourseClasses (1:many)
CourseClasses → AttendanceSessions (1:many)
AttendanceSessions → StudentAttendances (1:many)
Rooms → RoomAccessPermissions (1:many)
```

### Frontend State Management:
```
store/slices/
├── authSlice.js (user, token, role)
├── courseSlice.js (courses, enrollments)
├── attendanceSlice.js (sessions, records)
├── notificationSlice.js (notifications, count)
└── userSlice.js (user management)
```

================================================================================
## 🎯 REKOMENDASI URUTAN DEVELOPMENT

1. **MULAI:** Authentication + Super Admin User Management
2. **LANJUT:** Dashboard untuk semua role
3. **PRIORITAS:** Attendance System (Take Attendance → History → Manual)
4. **KEMUDIAN:** Course Management
5. **SELESAIKAN:** Face Dataset, Room Access, Notifications
6. **TERAKHIR:** Reporting & Analytics

**Estimasi Total: 8 minggu untuk implementasi lengkap**

================================================================================
### FITUR TAMBAHAN YANG TERSEDIA (Berdasarkan Routes Analysis)

#### 5.1 Session Management (Lecturer) ⭐⭐
**Backend:** ✅ INTEGRATED with Attendance System
- **Controller:** Integrated in `controllers/shared/attendanceController.js`
- **Models:** `AttendanceSessions` (attendanceModel.js)
- **Routes:** Part of `/api/attendance/*` (attendanceRoutes.js)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: MEDIUM
Components Needed:
├── views/lecturer/sessions/index.jsx (SessionManagement)
└── components/session/SessionCard.jsx

Integration Points:
- Same as Attendance Management (already covered in 2.3)
- Session Management is part of attendance workflow
```

#### 5.2 QR Code Scanner (Lecturer) ⭐⭐
**Backend:** ✅ INTEGRATED with Attendance System
- **Controller:** Integrated in `controllers/shared/attendanceController.js`
- **Models:** `AttendanceSessions`, `StudentAttendances` (attendanceModel.js)
- **Routes:** Part of `/api/attendance/*` (attendanceRoutes.js)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: MEDIUM
Components Needed:
├── views/lecturer/qr-code/QRCodeScanner.jsx
└── components/qr/QRScanner.jsx

Integration Points:
- QR Code Attendance: POST /api/attendance/record (with QR data)
- Generate QR Session: Integrated with session management
```

#### 5.3 Student Performance Analytics (Lecturer) ⭐⭐
**Backend:** ✅ READY via Reporting System
- **Controller:** `controllers/shared/reportController.js`
- **Models:** Multiple (Users, StudentAttendances, CourseClasses)
- **Routes:** `/api/reports/*` (reportRoutes.js)

**Frontend:** ❌ PERLU IMPLEMENTASI
```
Priority: MEDIUM
Components Needed:
├── views/lecturer/students/index.jsx (StudentPerformance)
└── components/analytics/StudentCard.jsx

Integration Points:
- Student Reports: GET /api/reports/attendance/student/:student_id
- Class Analytics: GET /api/reports/attendance/class/:class_id
```

================================================================================
## 🔄 KETERKAITAN SISTEM & DEPENDENCIES

### **Primary Dependencies (Must be implemented first):**
```
1. Authentication System → Semua fitur lainnya
2. User Management → Dashboard, Course, Attendance
3. Course Management → Attendance Management
4. Dashboard System → Membutuhkan data dari semua sistem
```

### **Secondary Dependencies:**
```
5. Attendance Management → Face Dataset, QR Code, Session Management
6. Face Dataset Management → Attendance (face recognition)
7. Room Management → Course scheduling, Door access
8. Notification System → All systems (for alerts)
```

### **Tertiary Dependencies:**
```
9. Reporting System → Attendance, Course, User data
10. Profile Management → User system, Face dataset
11. Session Management → Attendance system
12. QR Code System → Attendance system
```